---
import { SEO } from "astro-seo";
import { siteConfig } from "@/config/site";
import { ClientRouter } from "astro:transitions";
import { getImagePath } from "astro-opengraph-images";

interface Props {
  title: string;
  description: string;
  publishedTime?: string;
}

const { title, description, publishedTime } = Astro.props;
const currentPath = Astro.url.pathname;
const isWritingPost =
  currentPath.startsWith("/writing") && currentPath.split("/").length > 2;

const { url, site } = Astro;
const ogImageUrl = getImagePath({ url, site });
---

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link
    rel="alternate"
    type="application/atom+xml"
    title=`${siteConfig.name}'s Atom Feed`
    href="/feed.xml"
  />
  <SEO
    title={`${title} - ${siteConfig.name}`}
    description={description}
    canonical={`${siteConfig.url}${currentPath}`}
    openGraph={{
      basic: {
        title: title,
        type: isWritingPost ? "article" : "website",
        url: `${siteConfig.url}${currentPath}`,
        image: ogImageUrl,
      },
      optional: {
        description: description,
      },
      image: {
        width: 1200,
        height: 630,
      },
      ...(isWritingPost && {
        article: {
          publishedTime: publishedTime,
          authors: [siteConfig.author],
          section: "Writing",
        },
      }),
    }}
    twitter={{
      creator: `@${siteConfig.links.twitter.split("/")[3]}`,
      card: "summary_large_image",
    }}
    extend={{
      link: [
        {
          rel: "icon",
          type: "image/png",
          href: "/favicon-96x96.png",
          sizes: "96x96",
        },

        {
          rel: "icon",
          type: "image/svg+xml",
          href: "/favicon.svg",
        },
        {
          rel: "shortcut icon",
          href: "/favicon.ico",
        },
        {
          rel: "apple-touch-icon",
          sizes: "180x180",
          href: "/apple-touch-icon.png",
        },
        { rel: "me", href: siteConfig.links.github },
        { rel: "me", href: siteConfig.links.twitter },
        {
          rel: "sitemap",
          type: "application/xml",
          title: "Sitemap",
          href: "/sitemap-index.xml",
        },
      ],
      meta: [
        {
          name: "twitter:image",
          content: ogImageUrl,
        },
        { name: "twitter:title", content: `${title} - ${siteConfig.name}` },
        { name: "twitter:description", content: description },

        ...(isWritingPost
          ? [
              { property: "og:description", content: description },
              { property: "article:published_time", content: publishedTime },
              { property: "article:author", content: siteConfig.author },
              { property: "article:section", content: "Writing" },
            ]
          : []),

        { name: "author", content: siteConfig.author },
        { name: "theme-color", content: "#F9F4DC" },
        { name: "generator", content: Astro.generator },
      ],
    }}
  />

  {
    process.env.NODE_ENV === "production" && (
      <script
        is:inline
        defer
        src="https://cloud.umami.is/script.js"
        data-website-id="16abae01-5fcd-4b26-a799-54f62508d04b"
      />
    )
  }

  <ClientRouter fallback="swap" />
</head>
